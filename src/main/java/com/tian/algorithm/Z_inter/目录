#leedcode https://leetcode-cn.com/problemset/all/
#牛客网 https://www.nowcoder.com/ta/job-code-high

有一个巧妙的思路 ：
1 常常使用： for循环+递归  ======替代======>  解决多层级for循环


最小的K个数、寻找第K大   快堆归
快堆归 com.tian.algorithm.Z_inter.sort.sort

合并两个有序的数组 com.tian.algorithm.Z_inter.array.ArrayOp
连续子数组的最大和 com.tian.algorithm.Z_inter.array.ArrayOp
               com.tian.algorithm.Z_inter.list.ListNodeOperate sumMaxChild5 类似
两数之和 com.tian.algorithm.Z_inter.array.ArrayOp
所有子集 com.tian.algorithm.Z_inter.array.ArrayOp
全排列 com.tian.algorithm.Z_inter.array.ArrayOp
|leftMax-rightMax|绝对值最大 com.tian.algorithm.Z_inter.array.ArrayOp
最长无重复子数组 com.tian.algorithm.Z_inter.array.ArrayOp
（最长无重复子数组 和 两数之和 写法有点相似）
从数组中找出和为指定值的任意组合 com.tian.algorithm.Z_inter.array.ArrayOp 方法二
从数组中找出和为指定值的连续子组合 com.tian.algorithm.leedcode.a39a40_组合总和.sequenceChildSum_equal_target2 方法二
数组中两个字符串的最小距离 com.tian.algorithm.Z_inter.array.ArrayOp
    (面试中遇到是 大的字符串中两个字符串的最小距离，大的字符串是空格相隔的 ======> 可以将大的字符串 转换成 数组)


反转字符串 com.tian.algorithm.Z_inter.string.StringOp
回文/最大回文子字符串 com.tian.algorithm.Z_inter.string.StringOp
最长公共子串 com.tian.algorithm.Z_inter.string.StringOp
最长公共子序列 com.tian.algorithm.Z_inter.string.StringOp
括号序列 com.tian.algorithm.Z_inter.string.StringOp
最长的括号子串 com.tian.algorithm.Z_inter.string.StringOp  !!!


反转链表 com.tian.algorithm.Z_inter.list.ReverseList
连续子链表的和最大问题 com.tian.algorithm.Z_inter.list.ListNodeOperate
给定一个链表，两两交换其中相邻的节点 com.tian.algorithm.Z_inter.list.ListNodeOperate.swapPairs
实现一个单链表，每K个节点之间为一组进行逆序 com.tian.algorithm.Z_inter.list.ListNodeOperate
链表中的节点每k个一组翻转（正开始、倒开始 两个方向的）（包含链表翻转）
    com.tian.algorithm.Z_inter.list.ListNodeOperate
判断链表中是否有环  com.tian.algorithm.Z_inter.list.ListNodeOperate


树的先/中/后序遍历 com.tian.algorithm.Z_inter.tree.TreeSearch
在二叉树中找到两个节点的最近公共祖先 com.tian.algorithm.Z_inter.tree.TreeOp
树的子结构 com.tian.algorithm.Z_inter.tree.TreeOp
    （类似:两个二叉树是否完全相同）


###动态规划
斐波拉契 com.tian.algorithm.Z_inter.other.DynamicProgram
跳台阶 com.tian.algorithm.Z_inter.other.DynamicProgram
和最大的子序列 com.tian.algorithm.Z_inter.list.ListNodeOperate  ❌（即：所有正的相加  没有意义是说）
积水问题 水容量 com.tian.algorithm.Z_inter.other.DynamicProgram
        水面积 com.tian.algorithm.Z_inter.other.DynamicProgram
单词拆分 com.tian.algorithm.Z_inter.dict.DictOperate
a_岛屿面积和数量
    com.tian.algorithm.leedcode.a_岛屿面积和数量

###实现
用两个栈实现队列 com.tian.algorithm.Z_inter.queue.QueueOp
LRUCache com.tian.algorithm.Z_inter.cache.LRUCache（都是第一个类）
LFUCache com.tian.algorithm.Z_inter.cache.LFUCache（都是第一个类）
手写红黑树的简单实现 https://blog.csdn.net/ytulnj/article/details/103807903  ？？？？？？
                 https://blog.csdn.net/my_air/article/details/117125435  ？？？？？？


把String变为double型的方法 com.tian.algorithm.Z_inter.base.BasicDataStructure


阻塞队列BlockingQueue
    com.tian.algorithm.Z_inter.交叉打印.MyBlockingQueue


###交叉打印:    com.tian.algorithm.Z_inter.交叉打印.ThreadTest
synchronized+wait/notifyAll
ReentrantLock
ReentrantLock+Condition
采用while和boolean标识位来实现



#==========================================================================================
volatile
atomicInteger
AtomicInteger和volatile修饰符组合

CountDownLatch

https://www.cnblogs.com/rao11/p/13728941.html
https://blog.csdn.net/qq_28619473/article/details/90722878
https://ironic333.github.io/2020/02/22/%E4%B8%A4%E4%B8%AA%E7%BA%BF%E7%A8%8B%E4%BA%A4%E6%9B%BF%E6%89%93%E5%8D%B0%E6%95%B0%E5%AD%97/
https://www.jianshu.com/p/dcc7ee0ff110
https://zhuanlan.zhihu.com/p/83454731


有一个巧妙的思路 ：
1 常常使用： for循环+递归  ======替代======>  解决多层级for循环

回溯技巧
为了防止搞混 以及 应对面试： 提炼一种：for循环+"一次"递归;                                         建议定义
全排          	index  		for(i=0 		    def(index+1                                res,path,used
子集	 	        index  		for(i=index 		def(i+1         subsetsWithDup21           res,path,used        子集包括空

组合总和 	    index  		for(i=index 		def(i+1         subsetsWithDup21           res,path

上面变种：
    排列序列(全排列变种，第k个)

    复原IP地址(属于：固定顺序，含全部元素，的子集综合)
    编码加码(属于：固定顺序，含全部元素，的子集综合)


四个类似：
1最长公共子串 和 2最长公共子序列:
    两个for循环 + dp[i][j] = dp[i-1][j-1]+1
3最大回文子字符串:
    两个for循环 + dp[i][j] = dp[i+1][j-1]
4判断字符串可否由列表中的单词组成:
    dp[i] = dp[j] && wordDict.contains(s.substring(j,i));
    com.tian.algorithm.Z_inter.dict.DictOperate.wordBreak
5正则表达式匹配


交叉打印的模板流程：
   获取锁；
     while( a==t/f ){  // a是否等于特定条件
        wait()/await();
     }
     notify()/signal();
     a=t/f; // 赋值a特定条件
   释放锁；


a7_整数反转
a8_字符串转换整数
2n次方 com.tian.algorithm.pow.pow




#==================================================================
注意：  String,Array,ListNode 三种数据结构实现

和最大
    1 和最大的子数组 有意义；  (即：)
       temp = Math.max(temp+cur.data, cur.data);
       max  = Math.max(max,temp);
       或者
       dp[i] = Math.max(dp[i-1] + arr[i], arr[i]);
       maxSum = Math.max(maxSum,dp[i]);

    2 和最大的子序列 没有意义；（即：所有正的相加）（没有意义是说：不是上面写法）

最长公共
    1 最长公共子序列  有意义 (int[][] dp)
           dp[i][j] = dp[i - 1][j - 1] + 1;
         else
           dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);

    2 最长公共子数组/子串  (int[][] dp)
            dp[i + 1][j + 1] = dp[i][j] + 1;
        else
            dp[i + 1][j+1] = 0;

！！！！！
    ListNode 只能写子序列;不好描述子串/子手续;
    String,Array,ListNode 三种数据结构实现;


1 子集合：任意组合后的子集(空集是任意数组的子集)
2 子数组/子串: 必须连续
3 子序列: 不连续，相对位置不可改变

区分一下子集、子序列、子数组的概念：
    子集合：数组中的所有元素可以任意组合后的子集，当然，空集是任意数组的子集。
    子序列：原序列中可以不连续的一段。
    子数组（子串）：原序列中必须连续的一段。
但是无论是子序列和子数组，他们都可以看作是原数组的一部分，而且不会改变原来数组中元素的相对位置。而子集合是可以改变原来数组中元素的相对位置的。

区别
    子序列:元素在原数组的下标不连续，相对位置不可改变
例如
[1,2,3,4,5] -> [1,3,5]
子数组（子串）
元素在原数组的下标连续，相对位置不可变
例如
[1,2,3,4,5] -> [1,2,3]
特别的，子数组（子串）是子序列的一种特殊形式（当恰好取出的子序列是一连串的相邻元素时）
https://www.cnblogs.com/jentreywang/p/16799332.html

eg:
1
从数组中找出和为指定值的任意组合 com.tian.algorithm.Z_inter.array.ArrayOp 方法二
从数组中找出和为指定值的连续子组合 com.tian.algorithm.leedcode.a39a40_组合总和.sequenceChildSum_equal_target2 方法二
2
最长公共子串 com.tian.algorithm.Z_inter.string.StringOp
最长公共子序列 com.tian.algorithm.Z_inter.string.StringOp
#==================================================================
